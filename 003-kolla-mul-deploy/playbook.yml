---
- hosts: all
  sudo: yes

  vars:
    systemd_docker_config_directory: /etc/systemd/system/docker.service.d
    network_interface:          enp0s8
    neutron_external_interface: enp0s9
    kolla_internal_vip_address: "{{ '.'.join(vars['ansible_' + vars['network_interface']]['ipv4']['address'].split('.')[:3] + ['222']) }}"
    external_ip: "{{ '.'.join(vars['ansible_' + vars['neutron_external_interface']]['ipv4']['address'].split('.')[:3]) }}"
    ext_net_cidr:    "{{ external_ip }}.0/24"
    ext_net_range:   "start={{ external_ip }}.100,end={{ external_ip }}.200"
    ext_net_gateway: "{{ external_ip }}.1"
  tasks:
    - name: Install list of packages
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - epel-release
        - python-pip
        - python-devel
        - libffi-devel
        - gcc
        - openssl-devel
        - libselinux-python
        - ntp
    - name: Make sure the root bashrc
      template:
        src: bashrc.j2
        dest: ~/.bashrc
        force: yes
    - name: Make sure the pip folder
      file:
        path: ~/.pip
        state: directory
    - name: pip mirror
      template:
        src: pip.conf.j2
        dest: ~/.pip/pip.conf
        force: yes
    - name: Install Pip Packages
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - pip
        - ansible
        - docker
    - name: Diable selinux
      selinux:
        state: disabled
    - name: Make sure some service is disabled
      systemd:
        state: stopped
        name: "{{ item }}"
      with_items:
        - firewalld
    # - name: Ensure docker and dependencies are installed
    #   yum:
    #     list: "docker-ce"
    #   register: pkg
    # - name: Install docker rpm from a remote repo
    #   yum:
    #     name: /vagrant/docker-ce-17.06.0.ce-1.el7.centos.x86_64.rpm
    #     state: present
    #   when: pkg.results|selectattr("yumstate", "match", "installed")|list|length == 0
    # - name: Ensure docker.service directory is existed
    #   file:
    #     path: "{{ systemd_docker_config_directory }}"
    #     state: directory
    # - name: Ensure kolla.conf had contents
    #   template:
    #     src: kolla.conf.j2
    #     dest: "{{ systemd_docker_config_directory }}/kolla.conf"
    #     force: yes
    # - name: Ensure docker.etc directory is existed
    #   file:
    #     path: "/etc/docker"
    #     state: directory
    # - name: Ensure docker.json had contents
    #   template:
    #     src: daemon.json.j2
    #     dest: /etc/docker/daemon.json
    #     force: yes
    - name: Find out the vm support
      shell: |
        egrep -c '(vmx|svm)' /proc/cpuinfo
      register: vm_num
      ignore_errors: yes
    - name: Ensure nova-compute.conf had folder
      file:
        path: /etc/kolla/config/nova
        state: directory
      when: vm_num.stdout|int == 0
    - name: Ensure nova-compute.conf had contents
      template:
        src: nova-compute.conf.j2
        dest: /etc/kolla/config/nova/nova-compute.conf
      when: vm_num.stdout|int == 0
    - name: Ensure config had folder
      file:
        path: /etc/kolla/config/
        state: directory
    - name: Ensure ceph.conf had contents
      template:
        src: ceph.conf.j2
        dest: /etc/kolla/config/ceph.conf
    # - name: Restart docker systemd to take effect
    #   systemd:
    #     state: started
    #     enabled: yes
    #     daemon_reload: yes
    #     name: docker
    - name: Make sure ntp is running
      systemd:
        state: started
        name: ntpd
    - name: Install Pip Packages
      pip:
        name: "{{ item }}"
        state: present
      with_items:
        - kolla-ansible
        - python-openstackclient
    - name: Ensure the target folder existed
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/kolla
        - /root/inventory
    - name: Get contents from /usr/share/kolla-ansible
      shell: |
        cp -r /usr/share/kolla-ansible/etc_examples/kolla/* /etc/kolla/
    - name: Get the deploy file
      copy:
        src: multinode
        dest: /root/inventory/multinode
        force: yes
    - name: Modify /etc/kolla/globals.yml
      lineinfile:
        path: /etc/kolla/globals.yml
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^network_interface',          line: 'network_interface:          "{{ network_interface          }}"'}
        - { regexp: '^neutron_external_interface', line: 'neutron_external_interface: "{{ neutron_external_interface }}"'}
        - { regexp: '^kolla_internal_vip_address', line: 'kolla_internal_vip_address: "{{ kolla_internal_vip_address }}"'}
        - { regexp: '^keystone_admin_password',    line: 'keystone_admin_password: welcome'} # only source deploy can use this password
        - { regexp: '^openstack_release',          line: 'openstack_release: 4.0.3'}
        - { regexp: '^docker_registry',            line: 'docker_registry: 10.0.23.111:5000'}
        - { regexp: '^docker_namespace',           line: 'docker_namespace: lokolla'}
        - { regexp: '^kolla_install_type',         line: 'kolla_install_type: binary'}
        - { regexp: '^enable_cinder',              line: 'enable_cinder: "yes"'}
        - { regexp: '^enable_ceph',                line: 'enable_ceph: "yes"'}
        - { regexp: '^enable_ceph_rgw',            line: 'enable_ceph_rgw: "yes"'}
    - name: Gen password for /etc/kolla/passwords.yml
      shell: |
        kolla-genpwd
    - name: Modify /usr/share/kolla-ansible/init-runonce
      lineinfile:
        path: /usr/share/kolla-ansible/init-runonce
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^EXT_NET_CIDR',    line: 'EXT_NET_CIDR="{{    ext_net_cidr    }}"'}
        - { regexp: '^EXT_NET_RANGE',   line: 'EXT_NET_RANGE="{{   ext_net_range   }}"'}
        - { regexp: '^EXT_NET_GATEWAY', line: 'EXT_NET_GATEWAY="{{ ext_net_gateway }}"'}
        - { regexp: 'ssh-keygen -t rsa -f ~/.ssh/id_rsa', line: '    ssh-keygen -t rsa -f ~/.ssh/id_rsa -N "" '}
    - name: put the image for init-runonce to use
      copy:
        src: "{{ item.src}}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: 'cirros-0.3.4-x86_64-disk.img',           dest: '/usr/share/kolla-ansible/'}
        - { src: 'xenial-server-cloudimg-amd64-disk1.img', dest: '/usr/share/kolla-ansible/'}
        - { src: 'create_ubuntu_image.sh',                 dest: '/usr/share/kolla-ansible/'}
    - name: Modify the etc hosts file
      lineinfile:
        path: /etc/hosts
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^kolla-mul-controller-1',    line: 'kolla-mul-controller-1 10.0.23.41'}
        - { regexp: '^kolla-mul-network-1',       line: 'kolla-mul-network-1    10.0.23.51'}
        - { regexp: '^kolla-mul-compute-1',       line: 'kolla-mul-compute-1    10.0.23.61'}
        - { regexp: '^kolla-mul-monitoring-1',    line: 'kolla-mul-monitoring-1 10.0.23.71'}
        - { regexp: '^kolla-mul-storage-1',       line: 'kolla-mul-storage-1    10.0.23.81'}
